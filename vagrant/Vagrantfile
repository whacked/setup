# -*- mode: ruby -*-
# vi: set ft=ruby :

load 'Vagrant_common.rb'
USERNAME = "vagrant"

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  if false then
    required_plugins = %w( vagrant-vbguest vagrant-disksize vagrant-guest_ansible )
    required_plugins.each do |plugin|
        unless Vagrant.has_plugin? plugin
            system "vagrant plugin install #{plugin}"
        end
    end
  end
  
  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://atlas.hashicorp.com/search.
  # config.vm.box = "nixos/nixos-18.03-x86_64"
  config.vm.box = "ubuntu/bionic64"
  # config.vm.hostname = "vagrant-box"

  config.ssh.username = USERNAME
  config.disksize.size = '100GB'

  # if ARGV[0] == "ssh" then
  #   config.ssh.username = ENV['USER']
  # end

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # config.vm.network "forwarded_port", guest: 80, host: 8080
  config.vm.network "forwarded_port", guest: 5901, host: 5901

  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.33.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  $default_vagrant_mount_candidates = [
    "shared",
    "data",
  ]
  for candidate in $default_vagrant_mount_candidates do
      local_candidate_path = File.join("..", candidate)
      if File.exists? local_candidate_path then
          vagrant_sync_path = "/vagrant_#{candidate}"
          puts("setting vagrant synced path: #{candidate} => #{vagrant_sync_path}")
          config.vm.synced_folder local_candidate_path, vagrant_sync_path
      end
  end

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  config.vm.provider "virtualbox" do |vb|
    # Display the VirtualBox GUI when booting the machine
    vb.gui = true
    vb.cpus = 4
  
    # Customize the amount of memory on the VM:
    vb.memory = "#{1024 * 8}"
    vb.customize [
      'modifyvm', :id,
      '--vram', '64',
      '--clipboard', 'bidirectional',
      '--draganddrop', 'bidirectional',
    ]
  end
  
  if config.vm.box.start_with? "ubuntu" then
    ADMIN_GROUP_NAME = 'admin'
  else
    ADMIN_GROUP_NAME = 'wheel'
  end

  config.vm.provision :shell, inline: "rm -rf /tmp/setup"
  config.vm.provision :file, source: ".", destination: "/tmp/setup"

  config.vm.provision :shell do |sh|
    pubkeys = Dir["#{ENV['HOME']}/.ssh/*.pub"].collect {|f|
      File.read f
    }.join("\n")
    sh.inline = <<-EOF
        groupadd #{ENV['USER']} || true
        useradd --create-home #{ENV['USER']} -g #{ENV['USER']} --groups #{ADMIN_GROUP_NAME} || true
        if [ -e /etc/sudoers.d ]; then
          echo "#{ENV['USER']} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/#{ENV['USER']}
        fi

        MAINUSER=#{ENV['USER']}
        USERHOME=/home/$MAINUSER
        mkdir -p $USERHOME/.ssh
        chmod 700 $USERHOME/.ssh
        cat >> $USERHOME/.ssh/authorized_keys <<EOF\n#{pubkeys}\nEOF
        cat authorized_keys /tmp/authorized_keys /tmp/vagrant-authorized_keys $(find /vagrant* -name authorized_keys) 2>/dev/null | sort -u >> $USERHOME/.ssh/authorized_keys
        chmod 644 $USERHOME/.ssh/authorized_keys
        chown -R $MAINUSER: $USERHOME/.ssh

        if [ ! -e $USERHOME/dot ]; then
          su - $MAINUSER -c 'git clone https://github.com/whacked/dot; cd dot; bash setup.sh'
        fi

        if [ ! -e /swap ]; then
          fallocate -l 4000M /swap
          chmod 600 /swap
          mkswap /swap
          swapon /swap
        fi
    EOF
  end

  if config.vm.box.start_with? "nixos" then
    config.vm.provision :shell do |sh|
      sh.inline = <<-EOF
        sudo nix-channel --add https://nixos.org/channels/nixos-18.09 nixos
        mv /etc/nixos/configuration.nix /etc/nixos/configuration.nix.orig
        cp /tmp/setup/configuration.vagrant.nix /etc/nixos/configuration.nix
        cp /tmp/setup/nix /etc/nixos/
        nix-shell -p dos2unix --run "dos2unix /etc/nixos/configuration.nix"
        nix-shell -p dos2unix --run "dos2unix /etc/nixos/nix/*"
        # sudo nixos-rebuild switch --upgrade
      EOF
    end
  end

  # <old>
  if File.exists? "../shared/authorized_keys"
    config.vm.provision :file do |file|
      file.source = "../shared/authorized_keys"
      file.destination = "/tmp/vagrant-authorized_keys"
    end
  end

  if config.vm.box.start_with? "ubuntu" then
    config.vm.provision "shell", inline: <<-SHELL
      apt-get update && apt-get upgrade -y
      apt-get install -y virtualbox-guest-dkms virtualbox-guest-utils virtualbox-guest-x11
      apt-get install -y libavcodec-extra
      # apt-get install xserver-xorg-legacy
      # apt-get install -y ubuntu-desktop
      
      cat > /etc/X11/Xwrapper.config <<EOF
        allowed_users=anybody
        needs_root_rights=yes
      EOF
      
      MAINUSER=#{ENV['USER']}
      USERHOME=/home/$MAINUSER
      LOGFILE=/tmp/$MAINUSER-vagrant-provision.log
      
      echo "=== CURRENT AUTHORIZED KEYS ==="
      cat $USERHOME/.ssh/authorized_keys
      
      cat authorized_keys /tmp/authorized_keys /tmp/vagrant-authorized_keys $(find /vagrant* -name authorized_keys) 2>/dev/null | sort -u >> $USERHOME/.ssh/authorized_keys
      echo "=== UPDATED AUTHORIZED KEYS ==="
      cat $USERHOME/.ssh/authorized_keys
      
      # nix setup
      su - $MAINUSER -c "rsync -az /tmp/setup/ $USERHOME/setup/"
      su - $MAINUSER -c 'ln -sf $HOME/setup/nix $HOME/.nixpkgs'
      
      truncate -s 0 $LOGFILE
      chown $MAINUSER: $LOGFILE
      if [ ! -e /nix ]; then
        echo '=== INSTALL NIX ===' | tee -a $LOGFILE
        su - $MAINUSER -c "curl https://nixos.org/nix/install | sh" |& tee -a $LOGFILE
      fi
      echo '=== INSTALL PACKAGES ===' | tee -a $LOGFILE
      # prevent "cannot allocate memory"
      # https://github.com/NixOS/nix/issues/421
      echo 1 > /proc/sys/vm/overcommit_memory
      su - $MAINUSER -c '. $HOME/.nix-profile/etc/profile.d/nix.sh; NIXPKGS_ALLOW_UNFREE=1 nix-env -i my-custom-nixpkgs'
      
      which ansible
      # install python "natively" for on-host execution
      apt-get install -y python
      
      # su - $MAINUSER -c '. $HOME/.nix-profile/etc/profile.d/nix.sh; ansible-playbook -i localhost, $HOME/setup/ansible/standard-with-nix.yml'
    SHELL
  end
  # </old>
end
